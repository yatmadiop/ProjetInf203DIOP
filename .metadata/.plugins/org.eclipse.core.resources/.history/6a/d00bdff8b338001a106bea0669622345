package siti.inf203.jena.outils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.jena.iri.impl.Main;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;

import siti.inf203.jena.app.SearchWord;


public class Sparql 
{
	// liste qui contiendra les termes de la requête étendue avec SPARQL
	private static List<String> expandList = new ArrayList<String>();
	
	public static List<String> getList() {
		return this.expandList;
	}
	
	public static String sparqlMorpho(String querySequence) throws IOException {
		FileManager.get().addLocatorClassLoader(Main.class.getClassLoader());
        Model model = FileManager.get().loadModel("resources/cancers.rdf");
        String queryString = 

        		// chercher le groupe auquel appartient le terme de recherche
        		"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
        		+ "PREFIX neovoc: <neo4j://vocabulary#>"
        		+ "PREFIX neoind: <neo4j://individuals#>"
        		+ "SELECT ?x ?y WHERE {"
        		+ "?neoind neovoc:libelleGroupeMorpho ?x ."
        		+ "?neoind neovoc:contient ?morpho ."
        		+ "?morpho neovoc:libelleCodeCIMO3 ?y ."
        		+ "FILTER regex(?y, '" + querySequence	+ "', \"i\")"
        		+"}";
         
        Query query = QueryFactory.create(queryString);
        QueryExecution qExec = QueryExecutionFactory.create(query, model);
        String retMorphoGroup = "";
        
        try {
        	ResultSet results = qExec.execSelect();
        	
        	//used to output query results	
        	//ResultSetFormatter.out(System.out, results, query);
        	int i = 1;
			while (results.hasNext()) {
				QuerySolution soln = results.nextSolution();
				
				Literal name = soln.getLiteral("y");
				Literal groupe = soln.getLiteral("x");
				retMorphoGroup = groupe.toString();
				System.out.println(i + "- " + name +"------------>"+groupe);
				i = i + 1;
			}
		} finally {
			qExec.close();
			// TODO: handle finally clause
		}
        expandList.add(retMorphoGroup);
        return retMorphoGroup;
    }
	
	public static String sparqlTopo(String querySequence) throws IOException {
		FileManager.get().addLocatorClassLoader(Main.class.getClassLoader());
        Model model = FileManager.get().loadModel("resources/cancers.rdf");
        String queryString = 

        		//chercher le groupe topographique auquel appartient le terme de recherche
        		"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
        		+ "PREFIX neovoc: <neo4j://vocabulary#>"
        		+ "PREFIX neoind: <neo4j://individuals#>"
        		+ "SELECT ?x ?y WHERE {"
        		+ "?neoind neovoc:libelleGroupeTopo ?x ."
        		+ "?neoind neovoc:contient ?topo ."
        		+ "?topo neovoc:libelleTopoCIMO3 ?y ."
        		+ "FILTER regex(?y, '" + querySequence + "', \"i\")"
        		+"}";
         
        Query query = QueryFactory.create(queryString);
        QueryExecution qExec = QueryExecutionFactory.create(query, model);
        String retTopoGroup;
        try {
        	ResultSet results = qExec.execSelect();
        	int i = 1;
			do {
				QuerySolution soln = results.nextSolution();
				
				Literal name = soln.getLiteral("y");
				Literal groupe = soln.getLiteral("x");
				retTopoGroup = groupe.toString();
				System.out.println(i + "- " + name +"------------>"+groupe);
				i = i + 1;
			} while (results.hasNext());
		} finally {
			qExec.close();
			// TODO: handle finally clause
		}
        expandList.add(retTopoGroup);
		return retTopoGroup ;
    }
	
	//comparer les mots au vocabulaire disponible et choisir le plus similaire
	//utiliser ce mot pour le rechercher le groupe correspondant le graphe RDF
	static String compareWordAndQuery(String wordToCompare) throws IOException {
		List<String> topoWords, morphoWords = new ArrayList<String>();
		morphoWords = ReadFile.readFileInStringList("tokenisedFile/morpho.txt");
		topoWords = ReadFile.readFileInStringList("tokenisedFile/topo.txt");
		String wordMatch = SearchWord.searchWord(wordToCompare);
		if (morphoWords.contains(wordMatch)) {
			//System.out.println("Yes it contains it");
			sparqlMorpho(wordMatch);
		}
		else if (topoWords.contains(wordMatch)) {
			//System.out.println("No, they does'nt");
			sparqlTopo(wordMatch);
		}
		return wordMatch;
	}
	
	// gerer le cas où l'utilisateur rentre une chaine de caractères
	//ajouter les termes modifiés à 'expandList'
	public static void runSparqlQuery(String query) throws IOException {
		
		String[] queryList = query.trim().split("\\s+");
		for (int i = 0; i < queryList.length; i++) {
			expandList.add(compareWordAndQuery(queryList[i]));
			
		}
	}
	// récupèrer la liste de mots dans un string qu'on utilisera pour chercher dans l'index
	public static String getExpandString(String st) throws IOException {
		Sparql.runSparqlQuery(st);		
		StringBuffer sb = new StringBuffer();
	      
	      for (String s : expandList) {
	         sb.append(s);
	         sb.append(" ");
	      }
	      String str = sb.toString();
	      System.out.println(str);
	      
		return str;
		
	}

}
