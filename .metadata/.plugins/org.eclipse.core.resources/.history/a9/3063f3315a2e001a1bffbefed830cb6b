package siti.inf203.jena.outils;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class EditDistance {
	
	static HashMap<Integer, String> calculate(String x, String y) {
		
		HashMap<Integer, String> setOfMatch = new HashMap<Integer, String>();
		
	    int[][] dp = new int[x.length() + 1][y.length() + 1];
	 
	    for (int i = 0; i <= x.length(); i++) {
	        for (int j = 0; j <= y.length(); j++) {
	            if (i == 0) {
	                dp[i][j] = j;
	            }
	            else if (j == 0) {
	                dp[i][j] = i;
	            }
	            else {
	                dp[i][j] = min(dp[i - 1][j - 1] 
	                 + costOfSubstitution(x.charAt(i - 1), y.charAt(j - 1)), 
	                  dp[i - 1][j] + 1, 
	                  dp[i][j - 1] + 1);
	            }
	        }
	    }
	    
	    setOfMatch.put(dp[x.length()][y.length()], x);
	    
	    System.out.println(x + " et " + y + " " + dp[x.length()][y.length()]);
	    
	    
	    return setOfMatch;
	}
	
    public static int costOfSubstitution(char a, char b) {
        return a == b ? 0 : 1;
    }
 
    public static int min(int... numbers) {
        return Arrays.stream(numbers)
          .min().orElse(Integer.MAX_VALUE);
    }	
    
    public static void main(String[] args) throws IOException {
		
    	List<String> maList = ReadFile.readFileInStringList("tokenisedFile/topo.txt");
    	
    	HashMap<Integer, String> myHashMap = new HashMap<Integer, String>();
    	
    	for (int i = 0; i < maList.size(); i++) {
			myHashMap.putAll(calculate(maList.get(i), "amigdale"));
		}
    	System.out.println(myHashMap.get(0));
	}
}
