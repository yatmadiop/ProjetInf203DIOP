package siti.inf203.jena.outils;

import java.io.BufferedReader;
import java.util.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import siti.inf203.jena.app.SearchMorpho;

public class EditDistance {
	
	public static TreeMap<Integer, String> calculate(String x, String y) {
		
		TreeMap<Integer, String> setOfComparedWord = new TreeMap<Integer, String>();
		
	    int[][] dp = new int[x.length() + 1][y.length() + 1];
	 
	    for (int i = 0; i <= x.length(); i++) {
	        for (int j = 0; j <= y.length(); j++) {
	            if (i == 0) {
	                dp[i][j] = j;
	            }
	            else if (j == 0) {
	                dp[i][j] = i;
	            }
	            else {
	                dp[i][j] = min(dp[i - 1][j - 1] 
	                 + costOfSubstitution(x.charAt(i - 1), y.charAt(j - 1)), 
	                  dp[i - 1][j] + 1, 
	                  dp[i][j - 1] + 1);
	            }
	        }
	    }
	    
	    setOfComparedWord.put(dp[x.length()][y.length()], x);
	    System.out.println(similarity(x, y));
	    System.out.println(x + " et " + y + " " + dp[x.length()][y.length()]);
	    	    
	    return setOfComparedWord;
	}
	
    public static int costOfSubstitution(char a, char b) {
        return a == b ? 0 : 1;
    }
 
    public static int min(int... numbers) {
        return Arrays.stream(numbers)
          .min().orElse(Integer.MAX_VALUE);
    }	
    
    public static double similarity(String s1, String s2) {
        String longer = s1, shorter = s2;
        if (s1.length() < s2.length()) { // longer should always have greater length
          longer = s2; shorter = s1;
        }
        int longerLength = longer.length();
        if (longerLength == 0) { return 1.0; /* both strings are zero length */ }
        /* // If you have Apache Commons Text, you can use it to calculate the edit distance:
        LevenshteinDistance levenshteinDistance = new LevenshteinDistance();
        return (longerLength - levenshteinDistance.apply(longer, shorter)) / (double) longerLength; */
        TreeMap<Integer, String> myMorphoMatchMap = new TreeMap<Integer, String>();
        int distance = EditDistance.calculate(longer, shorter).firstKey();
        return (longerLength - distance) / (double) longerLength;

      }

}
